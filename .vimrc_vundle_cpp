" set mouse control with extended mouse mode
set mouse+=a

" tmux knows the extended mouse mode
if &term =~ '^screen' 
    set ttymouse=xterm2
endif

" be iMproved, required
set nocompatible

" required
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

" Start vundle plugin
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9' " Git plugin not hosted on GitHub

" The sparkup vim script is in a subdirectory of this repo called vim.
" For html editing
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" NERDTree We could also add repositories with a ".git" extension
Plugin 'scrooloose/nerdtree.git'

" buffer as tab
Plugin 'ap/vim-buftabline'

" taglist for function names
Plugin 'vim-scripts/taglist.vim'

" use gnu global, gtags
Plugin 'vim-scripts/gtags.vim'
map <C-g> :Gtags -g
map <C-h> :Gtags -f %<CR>
map <C-k> :Gtags -r <C-r><C-w><CR>
" for gtags
if filereadable("GTAGS")
    set cscopeprg=gtags-cscope
    cs add GTAGS
endif

" recognize gradle as a groovy
Plugin 'tfnico/vim-gradle'

" we need cscope
" Plugin 'vim-scripts/cscope.vim'

" and cscope map
Plugin 'chazy/cscope_maps'

" we need cctree
Plugin 'vim-scripts/CCTree'
let g:CCTreeDisplayMode=1 " use compact mode
let g:CCTreeHiSymbol=1
let g:CCTreeUseUTF8Symbols=0
let g:CCTreeMinWidth=45

" " We need powerline
Plugin 'Lokaltog/vim-powerline'
set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs
set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors

" switch between c/cpp and h files
Plugin 'vim-scripts/a.vim'

" coding plugin for c/c++
Plugin 'vim-scripts/c.vim'

" easily comment out line/blocks
Plugin 'tomtom/tcomment_vim'

" better cpp highlighting
Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight=1
let g:cpp_experimental_template_highlight=1

" Git change line indicator
Plugin 'airblade/vim-gitgutter'
let g:gitgutter_override_sign_column_highlight=0
highlight SignColumn ctermfg=white

" trying Plugin 'Valloric/YouCompleteMe'
Plugin 'Valloric/YouCompleteMe'

" best fuzzy finder
Plugin 'ctrlpvim/ctrlp.vim'

" for code review pull request from GitHub
Plugin 'codegram/vim-codereview'

" for patch review required by codereview
Plugin 'junkblocker/patchreview-vim'

" Multiple cursors
Plugin 'terryma/vim-multiple-cursors'

" Highlight Multiple words
Plugin 'vim-scripts/Mark--Karkat'

" ACK for vim
Plugin 'mileszs/ack.vim'

" better colors
" Plugin 'nanotech/jellybeans.vim'
" Plugin 'morhetz/gruvbox'
" Plugin 'vim-scripts/BusyBee'
" Plugin 'queyenth/oxeded.vim'
" Plugin 'widatama/vim-phoenix'
" but only use these 2
Plugin 'tpope/vim-vividchalk'
Plugin 'altercation/vim-colors-solarized'


" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax on
set wrap
set linebreak
set expandtab
set modelines=0
set clipboard=unnamed
set synmaxcol=128
set ttyscroll=10
set encoding=utf-8
if &diff
    set number
else
    set number
    set relativenumber
endif

" Do not setup back or swap file for each file we open
set nowritebackup
set noswapfile
set nobackup

" Automatic formatting
" autocmd BufWritePre *.rb :%s/\s\+$//e
" autocmd BufWritePre *.go :%s/\s\+$//e
" autocmd BufWritePre *.haml :%s/\s\+$//e
" autocmd BufWritePre *.html :%s/\s\+$//e
" autocmd BufWritePre *.scss :%s/\s\+$//e
" autocmd BufWritePre *.slim :%s/\s\+$//e

" au BufNewFile * set noeol
" au BufRead,BufNewFile *.go set filetype=go

" Jump to the next row on long lines
map <Down> gj
map <Up>   gk
nnoremap j gj
nnoremap k gk

" NERDTree
let NERDTreeHighlightCursorline=1
" Press "I" to toggle the visvility of the hidden files
" let NERDTreeShowHidden=1
" Open NERDTree when vim start
autocmd VimEnter * NERDTreeFind
" put cursor in another window
autocmd VimEnter * wincmd p

" Check if NERDTree is open or active
function! s:isNERDTreeOpen()
    return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:syncTree()
    if $modifiable && s:isNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
        NERDTreeFind
        wincmd p
    endif
endfunction

" Highlight currently open buffer in NERDTree
autocmd BufEnter * call s:syncTree()

" set tab option for programming guidance compliant
set copyindent
set preserveindent
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab

" set backspace
set backspace=2

" show hidden character
set list
set listchars=tab:>-,trail:~,extends:>,precedes:<
" if needed to show end of line then add ,eol:$

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

" Remember info about open buffers on close
" set viminfo^=%

" autocmd Syntax cpp call EnhanceCppSyntax()
autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp

" Cursor related config
if &term =~ '^screen' 
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
set cursorline
set cursorcolumn
highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=steelblue
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver25-iCursor
set guicursor+=n-v-c:blinkon0
set guicursor+=i:blinkwait10

syntax enable
set background=dark
colorscheme vividchalk

" Highlight while typing search word
set incsearch
set hlsearch
hi Search cterm=NONE ctermfg=grey ctermbg=blue
set ignorecase
set smartcase

" highlight vim tab
hi TabLineSel ctermfg=Red ctermbg=Yellow
hi Title ctermfg=LightBlue ctermbg=Magenta

" folding useing syntax
" set foldmethod=syntax


" if you set hidden, Vim can keep files open without necessarily displaying them on screen
set hidden
nnoremap <Leader>] :bp<CR>
nnoremap <Leader>[ :bn<CR>
